pipeline{

    environment{
        repository = 'tollea1234/grading-server-app'
        DOCKERHUB_CREDENTIALS = credentials('docker') // jenkins에 등록해 놓은 docker hub credentials 이름
        dockerImage = '' 
    }
    agent any

    stages{

        stage('Springboot build'){
            steps{
                dir('grading-server'){
                    sh '''
                        echo 'Springboot build...'
                        chmod +x gradlew
                        ./gradlew clean bootJar
                        rm -f .env
                        echo version=$BUILD_NUMBER > .env
                    '''
                }
            }
        }

        stage('Build docker image'){
            steps{
                dir('grading-server'){
                    script{
                        dockerImage = docker.build repository + ":$BUILD_NUMBER"
                    }
                }
            }
        }

        stage("Docker Hub Login"){
            steps{
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin' // docker hub 로그인 sh ''
            }
        }

        stage("Push our image"){
            steps{
                script{
                    sh "docker push $repository:$BUILD_NUMBER"
                }
            }
        }



        stage('Deploy on docker'){
            steps{
                dir('grading-server'){
                    
                    sh '''
                        scp -i ~/.ssh/id_rsa ./.env ubuntu@43.201.17.13:/home/ubuntu/grading-server/.env
                        scp -i ~/.ssh/id_rsa ./docker-compose.yml ubuntu@43.201.17.13:/home/ubuntu/grading-server/docker-compose.yml
                        ssh -i ~/.ssh/id_rsa ubuntu@43.201.17.13 "cd /home/ubuntu/grading-server && docker compose up -d"
                        
                     '''
                }
            }
        }
        


    }

    post{
        success {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good', 
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/44qww6fd4bbg3yjh4n67a4a3ce', 
                channel: 'Jenkins'
                )
            }
        }
        failure {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger', 
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: 'https://meeting.ssafy.com/hooks/44qww6fd4bbg3yjh4n67a4a3ce', 
                channel: 'Jenkins'
                )
            }
        }
    }

}